{"version":3,"sources":["styles/Board.module.css","styles/App.module.css","styles/Button.module.css","redux/reducers/counter-reducer.ts","components/Board.tsx","components/Button.tsx","components/Counter.tsx","components/Settings.tsx","App.tsx","redux/store.ts","utils/localstorage-utils.ts","index.tsx","styles/Settings.module.css","styles/Counter.module.css"],"names":["module","exports","ACTION_TYPE","Board","count","maxValue","className","s","board","red","Button","disabled","callBack","title","btn","onClick","initialState","currentValue","minValue","changeCurrentValue","type","CHANGE_CURRENT_VALUE","payload","Counter","setShowSettings","dispatch","useDispatch","useSelector","state","counter","wrapper","btnGroup","Settings","useState","btnDisabled","setBtnDisabled","error","setError","checkError","min","max","settings","value","onChange","e","CHANGE_MAX_VALUE","changeMaxValue","currentTarget","CHANGE_MIN_VALUE","changeMinValue","App","showSettings","app","rootReducer","combineReducers","action","store","createStore","localStorage","getItem","JSON","parse","loadState","subscribe","getState","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,IAAM,qB,mBCArDD,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,IAAM,sB,gECDnBC,E,+FCgBUC,EARqB,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SACxC,OACI,qBAAKC,UAAS,UAAKC,IAAEC,MAAP,YAAgBJ,IAAUC,EAAWE,IAAEE,IAAM,IAA3D,SACKL,K,iBCQEM,EAVuB,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MACxD,OACI,wBACIP,UAAWC,IAAEO,IACbH,SAAUA,EACVI,QAASH,EAHb,SAIEC,K,wBFfLX,K,4CAAAA,E,oCAAAA,E,qCAAAA,M,KAYL,IAAIc,EAAiC,CACjCC,aAAc,EACdC,SAAU,EACVb,SAAU,GAsBDc,EAAqB,SAACF,GAC/B,MAAO,CACHG,KAAMlB,EAAYmB,qBAClBC,QAAS,CAACL,kBGEHM,EA9ByB,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAEhCC,EAAWC,cAF0C,EAOvDC,aAAgD,SAACC,GAAD,OAAWA,EAAMC,WAHjEZ,EAJuD,EAIvDA,aACAC,EALuD,EAKvDA,SACAb,EANuD,EAMvDA,SAUJ,OACI,sBAAKC,UAAWC,IAAEuB,QAAlB,UACI,cAAC,EAAD,CAAO1B,MAAOa,EAAcZ,SAAUA,IAEtC,sBAAKC,UAAWC,IAAEwB,SAAlB,UACI,cAAC,EAAD,CAAQnB,SAZA,WAChBa,EAASN,EAAmBF,EAAe,KAWJN,SAAUM,IAAiBZ,EAAUQ,MAAO,QAC3E,cAAC,EAAD,CAAQD,SAVD,kBAAMa,EAASN,EAAmBD,KAUXP,SAAUM,IAAiBC,EAAUL,MAAO,UAC1E,cAAC,EAAD,CAAQA,MAAO,MAAOD,SAVb,kBAAMY,GAAgB,IAUeb,UAAU,W,gBCyCzDqB,EAjE2B,SAAC,GAAuB,IAAtBR,EAAqB,EAArBA,gBAElCC,EAAWC,cAF4C,EAOzDC,aAAgD,SAACC,GAAD,OAAWA,EAAMC,WAHjEZ,EAJyD,EAIzDA,aACAC,EALyD,EAKzDA,SACAb,EANyD,EAMzDA,SANyD,EAUvB4B,oBAAS,GAVc,mBAUtDC,EAVsD,KAUzCC,EAVyC,OAWnCF,oBAAS,GAX0B,mBAWtDG,EAXsD,KAW/CC,EAX+C,KAavDC,EAAa,SAACC,EAAaC,GACzBD,IAAQC,GAAOD,EAAM,GAAKA,EAAMC,GAChCL,GAAe,GACfE,GAAS,KAETA,GAAS,GACTF,GAAe,IAEflB,EAAesB,GAAKd,EAASN,EAAmBoB,IAChDtB,EAAeuB,GAAKf,EAASN,EAAmBqB,KAiBxD,OACI,sBAAKlC,UAAWC,IAAEkC,SAAlB,UACI,gCACI,8CAEI,uBACInC,UAAW8B,EAAQ7B,IAAE6B,MAAQ,GAC7BhB,KAAK,SACLsB,MAAOrC,EACPsC,SAjBO,SAACC,GACxBnB,EJQsB,SAACpB,GAC3B,MAAO,CACHe,KAAMlB,EAAY2C,iBAClBvB,QAAS,CAACjB,aIXDyC,EAAgBF,EAAEG,cAAcL,QACzCJ,EAAWpB,GAAW0B,EAAEG,cAAcL,aAiB9B,8CAEI,uBACIpC,UAAW8B,EAAQ7B,IAAE6B,MAAQ,GAC7BhB,KAAK,SACLsB,MAAOxB,EACPyB,SA9BO,SAACC,GACxBnB,EJMsB,SAACP,GAC3B,MAAO,CACHE,KAAMlB,EAAY8C,iBAClB1B,QAAS,CAACJ,aITD+B,EAAgBL,EAAEG,cAAcL,QACzCJ,GAAYM,EAAEG,cAAcL,MAAOrC,YAgC/B,cAAC,EAAD,CAAQQ,MAAO,MAAOD,SAxBV,kBAAMY,GAAgB,IAwBWb,SAAUuB,QCnDpDgB,EAfH,WAAO,IAAD,EAC0BjB,oBAAS,GADnC,mBACPkB,EADO,KACO3B,EADP,KAGd,OACI,qBAAKlB,UAAWC,IAAE6C,IAAlB,SAEQD,EACM,cAAC,EAAD,CAAU3B,gBAAiBA,IAC3B,cAAC,EAAD,CAASA,gBAAiBA,O,QCT1C6B,EAAcC,YAAgB,CAChCzB,QNa0B,WAAiE,IAAhED,EAA+D,uDAAvDZ,EAAcuC,EAAyC,uCAC1F,OAAQA,EAAOnC,MACX,KAAKlB,EAAYmB,qBAEjB,KAAKnB,EAAY8C,iBAEjB,KAAK9C,EAAY2C,iBACb,OAAO,2BAAIjB,GAAU2B,EAAOjC,SAChC,QACI,OAAOM,MMnBN4B,EAAQC,YAAYJ,ECNR,WACrB,IAAMnC,EAAWwC,aAAaC,QAAQ,YAChCtD,EAAWqD,aAAaC,QAAQ,YAChC1C,EAAeyC,aAAaC,QAAQ,gBAC1C,GAAKtD,GAAaa,GAAaD,EAG/B,MAAO,CACHY,QAAS,CACLZ,aAAc2C,KAAKC,MAAM5C,GACzBC,SAAU0C,KAAKC,MAAM3C,GACrBb,SAAUuD,KAAKC,MAAMxD,KDLayD,IAI9CN,EAAMO,WAAU,WCMS,IAACnC,IDLZ4B,EAAMQ,WCMhBN,aAAaO,QAAQ,eAAgBL,KAAKM,UAAUtC,EAAMC,QAAQZ,eAClEyC,aAAaO,QAAQ,WAAYL,KAAKM,UAAUtC,EAAMC,QAAQX,WAC9DwC,aAAaO,QAAQ,WAAYL,KAAKM,UAAUtC,EAAMC,QAAQxB,cCdlE8D,IAASC,OACL,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEFa,SAASC,eAAe,U,kBCV9BtE,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,0B,kBCAhED,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.b421fa71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1yKCf\",\"red\":\"Board_red__e-zxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3j68r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__FoOJD\"};","enum ACTION_TYPE {\r\n    CHANGE_CURRENT_VALUE = 'CHANGE_CURRENT_VALUE',\r\n    CHANGE_MIN_VALUE = 'CHANGE_MIN_VALUE',\r\n    CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE',\r\n}\r\n\r\nexport type CounterStateType = {\r\n    currentValue: number\r\n    minValue: number\r\n    maxValue: number\r\n}\r\n\r\nlet initialState: CounterStateType = {\r\n    currentValue: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n}\r\n\r\nexport const counterReducer = (state = initialState, action: ActionType): CounterStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.CHANGE_CURRENT_VALUE:\r\n            return {...state, ...action.payload,}\r\n        case ACTION_TYPE.CHANGE_MIN_VALUE:\r\n            return {...state, ...action.payload,}\r\n        case ACTION_TYPE.CHANGE_MAX_VALUE:\r\n            return {...state, ...action.payload,}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = ChangeMaxValueType | ChangeMinValueType | ChangeCurrentValueType\r\n\r\ntype ChangeMaxValueType = ReturnType<typeof changeMaxValue>\r\ntype ChangeMinValueType = ReturnType<typeof changeMinValue>\r\ntype ChangeCurrentValueType = ReturnType<typeof changeCurrentValue>\r\n\r\nexport const changeCurrentValue = (currentValue: number) => {\r\n    return {\r\n        type: ACTION_TYPE.CHANGE_CURRENT_VALUE,\r\n        payload: {currentValue,}\r\n    } as const\r\n}\r\n\r\nexport const changeMinValue = (minValue: number) => {\r\n    return {\r\n        type: ACTION_TYPE.CHANGE_MIN_VALUE,\r\n        payload: {minValue,}\r\n    } as const\r\n}\r\n\r\nexport const changeMaxValue = (maxValue: number) => {\r\n    return {\r\n        type: ACTION_TYPE.CHANGE_MAX_VALUE,\r\n        payload: {maxValue,}\r\n    } as const\r\n}\r\n","import React from 'react';\r\nimport s from '../styles/Board.module.css'\r\n\r\ntype BoardProps = {\r\n    count: number\r\n    maxValue: number\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({count,maxValue}) => {\r\n    return (\r\n        <div className={`${s.board} ${count === maxValue ? s.red : ''}`}>\r\n            {count}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport s from '../styles/Button.module.css'\r\n\r\ntype ButtonProps = {\r\n    title: string\r\n    callBack: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({disabled, callBack, title}) => {\r\n    return (\r\n        <button\r\n            className={s.btn}\r\n            disabled={disabled}\r\n            onClick={callBack}\r\n        >{title}</button>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport s from '../styles/Counter.module.css'\r\nimport Board from './Board';\r\nimport Button from './Button';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/store';\r\nimport {changeCurrentValue, CounterStateType} from '../redux/reducers/counter-reducer';\r\n\r\ntype CounterProps = {\r\n    setShowSettings: (bool: boolean) => void\r\n}\r\n\r\nconst Counter: React.FC<CounterProps> = ({setShowSettings}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    let {\r\n        currentValue,\r\n        minValue,\r\n        maxValue,\r\n    } = useSelector<AppRootStateType, CounterStateType>((state) => state.counter)\r\n\r\n    const changeCount = () => {\r\n        dispatch(changeCurrentValue(currentValue + 1))\r\n    }\r\n    const resetCount = () => dispatch(changeCurrentValue(minValue))\r\n    const showSettings = () => setShowSettings(true)\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Board count={currentValue} maxValue={maxValue}/>\r\n\r\n            <div className={s.btnGroup}>\r\n                <Button callBack={changeCount} disabled={currentValue === maxValue} title={'INC'}/>\r\n                <Button callBack={resetCount} disabled={currentValue === minValue} title={'RESET'}/>\r\n                <Button title={'SET'} callBack={showSettings} disabled={false}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from '../styles/Settings.module.css'\r\nimport Button from './Button';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/store';\r\nimport {changeCurrentValue, changeMaxValue, changeMinValue, CounterStateType} from '../redux/reducers/counter-reducer';\r\n\r\ntype SettingsProps = {\r\n    setShowSettings: (bool: boolean) => void\r\n}\r\n\r\nconst Settings: React.FC<SettingsProps> = ({setShowSettings}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        currentValue,\r\n        minValue,\r\n        maxValue,\r\n    } = useSelector<AppRootStateType, CounterStateType>((state) => state.counter)\r\n\r\n\r\n    const [btnDisabled, setBtnDisabled] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const checkError = (min: number, max: number) => {\r\n        if (min === max || min < 0 || min > max) {\r\n            setBtnDisabled(true)\r\n            setError(true)\r\n        } else {\r\n            setError(false)\r\n            setBtnDisabled(false)\r\n        }\r\n        if (currentValue < min) dispatch(changeCurrentValue(min))\r\n        if (currentValue > max) dispatch(changeCurrentValue(max))\r\n\r\n    }\r\n\r\n    const setMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeMinValue(+e.currentTarget.value))\r\n        checkError(+e.currentTarget.value, maxValue)\r\n    }\r\n\r\n    const setMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeMaxValue(+e.currentTarget.value))\r\n        checkError(minValue, +e.currentTarget.value)\r\n    }\r\n\r\n    const showCounter = () => setShowSettings(false)\r\n\r\n\r\n    return (\r\n        <div className={s.settings}>\r\n            <div>\r\n                <label>\r\n                    Max value\r\n                    <input\r\n                        className={error ? s.error : ''}\r\n                        type=\"number\"\r\n                        value={maxValue}\r\n                        onChange={setMaxValueHandler}/>\r\n                </label>\r\n                <label>\r\n                    Min value\r\n                    <input\r\n                        className={error ? s.error : ''}\r\n                        type=\"number\"\r\n                        value={minValue}\r\n                        onChange={setMinValueHandler}/>\r\n                </label>\r\n\r\n            </div>\r\n            <Button title={'set'} callBack={showCounter} disabled={btnDisabled}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;","import React, {useState} from 'react';\r\nimport s from './styles/App.module.css'\r\nimport Counter from './components/Counter';\r\nimport Settings from './components/Settings';\r\n\r\nconst App = () => {\r\n    const [showSettings, setShowSettings] = useState(false);\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            {\r\n                showSettings\r\n                    ? <Settings setShowSettings={setShowSettings}/>\r\n                    : <Counter setShowSettings={setShowSettings}/>\r\n\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './reducers/counter-reducer';\r\nimport {loadState, saveState} from '../utils/localstorage-utils';\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState())\r\n})","import {AppRootStateType} from '../redux/store';\r\n\r\nexport const loadState = (): AppRootStateType | undefined => {\r\n    const minValue = localStorage.getItem('minValue')\r\n    const maxValue = localStorage.getItem('maxValue')\r\n    const currentValue = localStorage.getItem('currentValue')\r\n    if (!maxValue || !minValue || !currentValue) {\r\n        return undefined\r\n    }\r\n    return {\r\n        counter: {\r\n            currentValue: JSON.parse(currentValue),\r\n            minValue: JSON.parse(minValue),\r\n            maxValue: JSON.parse(maxValue),\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveState = (state: AppRootStateType) => {\r\n    localStorage.setItem('currentValue', JSON.stringify(state.counter.currentValue))\r\n    localStorage.setItem('minValue', JSON.stringify(state.counter.minValue))\r\n    localStorage.setItem('maxValue', JSON.stringify(state.counter.maxValue))\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css'\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__1wTMM\",\"error\":\"Settings_error__2L837\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__zY7Jo\"};"],"sourceRoot":""}